frameworkVersion: ">=1.30.3 <2.0.0"

service: auth-provider

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  region: ${self:provider.environment.REGION, "us-west-1"}
  endpointType: REGIONAL
  environment: ${file(./env.yml):${opt:stage, self:provider.stage}}
  logRetentionInDays: 3
  iamRoleStatements:
    - Effect: Allow
      Action:
      - dynamodb:Scan
      - dynamodb:Query
      - dynamodb:PutItem
      - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:*
    - Effect: Allow
      Action:
      - cognito-sync:*
      - cognito-identity:*
      Resource: arn:aws:cognito-identity:*:*:*
    - Effect: Allow
      Action:
      - cognito-idp:*
      Resource: arn:aws:cognito-idp:*:*:*
    - Effect: Allow
      Action:
      - kms:*
      Resource: "*"
      
  runtime: nodejs10.x

package:
  exclude:
    - .git/**

# Functions

functions:
  main:
    handler: handler.main
    memorySize: 256
    timeout: 15
    events:
      - http:
          path: authentication
          method: get
          integration: lambda-proxy
  processSignin:
    handler: handler.processSignin
    memorySize: 256
    timeout: 15
    events:
      - http:
          path: authentication/process/signin
          method: get
          integration: lambda-proxy
  processSignup:
    handler: handler.processSignup
    memorySize: 256
    timeout: 15
    events:
      - http:
          path: authentication/process/signup
          method: post
          integration: lambda-proxy
  signout:
    handler: handler.signout
    memorySize: 256
    timeout: 15
    events:
      - http:
          path: authentication/signout
          method: get
          integration: lambda-proxy
  signin:
    handler: handler.signin
    memorySize: 256
    timeout: 15
    events:
      - http:
          path: authentication/signin/{provider}
          method: get
          integration: lambda-proxy
  callback:
    handler: handler.callback
    memorySize: 256
    timeout: 15
    events:
      - http:
          path: authentication/callback/{provider}
          method: get
          integration: lambda-proxy
  refresh:
    handler: handler.refresh
    memorySize: 256
    timeout: 15
    events:
      - http:
          path: authentication/refresh/{refresh_token}
          method: get
          cors: true
          integration: lambda
          request:
            template:
              application/json: |
                {
                  "refresh_token":"$input.params('refresh_token')",
                  "id":"$input.params('id')",
                  "state":"$input.params('state')",
                  "host":"$input.params().header.get('host')",
                  "stage":"$context.stage"
                }
  authorize:
    handler: handler.authorize
  userinfo:
    handler: handler.userinfo
    memorySize: 256
    timeout: 15
    events:
      - http:
          path: authentication/userinfo
          method: get
          integration: lambda-proxy
          authorizer: authorize
          cors: true

plugins:
  - deployment-info
  - serverless-offline
  - serverless-mocha-plugin
  - serverless-domain-manager

custom:
  customDomain: 
    domainName: ${self:provider.environment.REDIRECT_DOMAIN_NAME, ""}
    stage: ${self:provider.environment.STAGE}
    basePath: ${self:provider.environment.BASE_PATH}
    certificateArn: ${self:provider.environment.REDIRECT_CERTIFICATE_ARN}
    createRoute53Record: true
    endpointType: 'regional'
    securityPolicy: tls_1_2
    enabled: true
  serverless-offline:
    port: 4080
  deployType: Canary10Percent5Minutes
  deploymentSettings:
    stages:
      - asem
  prune:
    automatic: true
    number: 5
  splitStacks:
    perFunction: false
    perType: true
    
resources:
  Description: ${self:provider.environment.SERVICE} [${self:provider.environment.STAGE}] template
  Resources:
    CacheTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: token
            AttributeType: S
          - AttributeName: type
            AttributeType: S
        KeySchema:
          - AttributeName: token
            KeyType: HASH
          - AttributeName: type
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.CACHE_DB_NAME}

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        SSESpecification:
          SSEEnabled: true
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.USERS_DB_NAME}